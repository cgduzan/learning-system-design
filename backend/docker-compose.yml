{
  "services": {
    "load-balancer-1": {
      "image": "nginx:alpine",
      "environment": {},
      "networks": [
        "app_network"
      ],
      "restart": "unless-stopped",
      "ports": [
        "8080:80"
      ],
      "volumes": [
        "./nginx.conf:/etc/nginx/nginx.conf:ro"
      ],
      "command": [
        "nginx",
        "-g",
        "daemon off;"
      ],
      "depends_on": [
        "app-server-2",
        "app-server-3"
      ]
    },
    "app-server-2": {
      "image": "node:18-alpine",
      "environment": {
        "NODE_ENV": "production"
      },
      "networks": [
        "app_network"
      ],
      "restart": "unless-stopped",
      "command": [
        "sh",
        "-c",
        "mkdir -p /app && echo \"<html><body><h1>Hello from app server</h1><p>Server ID: 2</p></body></html>\" > /app/index.html && node -e \"const http = require('http'); const fs = require('fs'); const server = http.createServer((req, res) => { res.writeHead(200, {'Content-Type': 'text/html'}); res.end(fs.readFileSync('/app/index.html')); }); server.listen(3000, '0.0.0.0', () => console.log('Server running on port 3000'));\""
      ]
    },
    "app-server-3": {
      "image": "node:18-alpine",
      "environment": {
        "NODE_ENV": "production"
      },
      "networks": [
        "app_network"
      ],
      "restart": "unless-stopped",
      "command": [
        "sh",
        "-c",
        "mkdir -p /app && echo \"<html><body><h1>Hello from app server</h1><p>Server ID: 3</p></body></html>\" > /app/index.html && node -e \"const http = require('http'); const fs = require('fs'); const server = http.createServer((req, res) => { res.writeHead(200, {'Content-Type': 'text/html'}); res.end(fs.readFileSync('/app/index.html')); }); server.listen(3000, '0.0.0.0', () => console.log('Server running on port 3000'));\""
      ]
    }
  },
  "networks": {
    "app_network": {
      "driver": "bridge"
    }
  }
}